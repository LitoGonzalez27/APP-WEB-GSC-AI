#!/usr/bin/env python3
"""
Script de diagn√≥stico para verificar detecci√≥n de menciones en LLM Monitoring

Analiza una respuesta espec√≠fica de LLM y muestra:
- Qu√© variaciones de marca se est√°n generando
- Si se detectan menciones de la marca
- Si se detectan menciones de competidores
- Por qu√© podr√≠a no estar detectando correctamente
"""

import sys
from services.ai_analysis import extract_brand_variations, remove_accents
import re

# La respuesta real de ChatGPT que el usuario dice que tiene menciones
RESPONSE_TEXT = """
¬øQu√© tasas de √©xito tiene Ginemed en comparaci√≥n con IVI?

Aqu√≠ tienes lo que he podido averiguar sobre las tasas de √©xito de IVI y Ginemed en Espa√±a ‚Äî pero ojo: los datos no permiten una comparaci√≥n directa fiable, porque los criterios, tratamientos y segmentos de pacientes var√≠an bastante. Te lo explico con detalle.

IVI

En su p√°gina, IVI afirma que sus "tasas de √©xito son hasta un 25 % superiores a la media del sector seg√∫n datos p√∫blicos de la Sociedad Espa√±ola de Fertilidad (SEF)". 
IVI

En otro apartado, dicen que "en FIV como en ovodonaci√≥n nuestras tasas de √©xito rondan en torno al 70 %-80 % en un solo intento, mientras que la tasa acumulada a tres intentos en ambos casos es muy cercana al 100 %". 
IVI

En un foro, alguien cita datos para IVI Madrid: para mujeres <35 a√±os con √≥vulos propios, 42.7-52.4 % de embarazo; para 35-39 a√±os, 30.8-44.4 %; para >40 a√±os, 1.5-29.3 %. 
Reproducci√≥n Asistida ORG

Seg√∫n informaci√≥n general del sector (no espec√≠fica de IVI), la tasa de parto por transferencia para FIV-ICSI con √≥vulos propios: <35 a√±os ‚Üí ~34.6 %, 35-39 a√±os ‚Üí ~25 %, ‚â•40 a√±os ‚Üí ~11.6 %. 
Reproducci√≥n Asistida ORG

Conclusi√≥n para IVI: La cl√≠nica afirma tasas elevadas (70-80 % en ciertos tratamientos), pero los datos p√∫blicos m√°s detallados muestran rangos mucho m√°s bajos y muy dependientes de la edad y del tipo de tratamiento. En resumen: tienen buenos resultados, pero no hay garant√≠a de 70-80 % para todos los casos.

Ginemed

En su web se√±alan para "ovodonaci√≥n" una tasa "en torno al 80 %" en transferencias de dos embriones en d√≠a +5 (blastocisto). 
Ginemed

Tambi√©n indican: "un 84 % de embarazos en un ciclo (fresco + vitrificado)" para ovodonaci√≥n. 
Ginemed

Un site de an√°lisis de cl√≠nicas indica para Ginemed Madrid algunos datos poco fiables: por ejemplo, "mujer receptora menor de 35 a√±os: 100 %-100 %" en embarazo por transferencia embrionaria (lo que parece poco cre√≠ble). 
asprofa.es

Otro informe muestra una tasa de embarazo por ciclo (FIV-ICSI) seg√∫n otro site: 73 %. 
Mundo Fertilidad

Conclusi√≥n para Ginemed: Tambi√©n declaran tasas muy altas, especialmente en ovodonaci√≥n. Pero como con IVI, es clave ver a qu√© tratamiento corresponde exactamente, la edad, si es √≥vulos propios o donados, etc. Los datos p√∫blicos m√°s neutrales muestran rangos menos definitivos.

Comparaci√≥n cr√≠tica

Tratamientos distintos: Cuando una cl√≠nica habla de "ovodonaci√≥n" (√≥vulos de donante) los porcentajes son sustancialmente mejores que cuando se usan los propios √≥vulos de la mujer. Por lo tanto, si Ginemed cita ~80 % para ovodonaci√≥n y IVI habla de 70-80 % para ciertos casos, puede que ambos est√©n hablando de √≥vulos de donante o de tratamientos seleccionados, no del promedio global.

Edad de la paciente: Es el factor n√∫mero uno que afecta √©xito. Las cifras globales del sector muestran tasas de parto muy inferiores para >40 a√±os, por ejemplo ~11%. 
Reproducci√≥n Asistida ORG

Transparencia de los datos: Muchos datos provienen de soportes de marketing de las cl√≠nicas, no de un informe p√∫blico homog√©neo. Esto dificulta la comparaci√≥n estricta y objetiva.

Promesas vs realidad: Decir "tasa hasta 25 % mejor que la media" es algo vago: no se especifica para qu√© grupo de pacientes, cu√°ntos ciclos, etc.

Expectativas cautas: Ninguna cl√≠nica puede garantizar embarazo o parto. Como dice un art√≠culo: "ninguna cl√≠nica‚Ä¶ puede asegurarte que tendr√°s un hijo". 
Newtral

¬øMi veredicto?

Carlos: no est√°s totalmente equivocado al querer ver cu√°l de las dos tiene "mejores" resultados ‚Äî es una pregunta leg√≠tima y relevante para tu cliente. Pero s√≠ estar√≠a equivocado si esperas una respuesta clara y "cu√°l es la mejor con datos inequ√≠vocos" porque no existe una comparaci√≥n perfecta disponible p√∫blicamente.

Si tuviera que resumir:

IVI tiene una reputaci√≥n fuerte, declaran buenos resultados, pero los datos p√∫blicos muestran que los resultados dependen mucho del perfil de la paciente.

Ginemed tambi√©n afirma tasas altas, especialmente en ovodonaci√≥n, pero hay menos datos independientes de comparaci√≥n.

Si quieres, puedo revisar los informes m√°s recientes de la SEF o de cada cl√≠nica para ver valores actualizados espec√≠ficos para Madrid en 2023-24, y ver si logro encontrar datos comparativos en contextos similares (por edad, tratamiento). ¬øTe parece bien que lo haga?
"""

def diagnose_mention_detection():
    """
    Diagnostica por qu√© no se est√°n detectando las menciones correctamente
    """
    
    print("="*80)
    print("üîç DIAGN√ìSTICO DE DETECCI√ìN DE MENCIONES")
    print("="*80)
    print()
    
    # Probar diferentes brand_names posibles
    test_cases = [
        {
            'brand_name': 'Ginemed',
            'competitors': ['IVI', 'Reproducci√≥n Asistida']
        },
        {
            'brand_name': 'ginemed.com',
            'competitors': ['ivi.es', 'reproduccionasistida.org']
        }
    ]
    
    for i, test in enumerate(test_cases, 1):
        brand_name = test['brand_name']
        competitors = test['competitors']
        
        print(f"\n{'='*80}")
        print(f"TEST {i}: brand_name = '{brand_name}'")
        print(f"{'='*80}\n")
        
        # 1. Generar variaciones de marca
        print(f"1Ô∏è‚É£ VARIACIONES GENERADAS DE '{brand_name}':")
        brand_variations = extract_brand_variations(brand_name.lower())
        for var in brand_variations:
            print(f"   - '{var}'")
        
        # 2. Buscar menciones
        print(f"\n2Ô∏è‚É£ B√öSQUEDA DE MENCIONES:")
        mentions_found = []
        text_lower = RESPONSE_TEXT.lower()
        
        for variation in brand_variations:
            pattern = r'\b' + re.escape(variation.lower()) + r'\b'
            matches = list(re.finditer(pattern, text_lower, re.IGNORECASE))
            
            if matches:
                print(f"   ‚úÖ '{variation}' encontrada: {len(matches)} veces")
                for match in matches:
                    start = max(0, match.start() - 50)
                    end = min(len(RESPONSE_TEXT), match.end() + 50)
                    context = RESPONSE_TEXT[start:end].strip()
                    mentions_found.append((variation, context))
            else:
                print(f"   ‚ùå '{variation}' NO encontrada")
        
        # 3. Resultados finales
        print(f"\n3Ô∏è‚É£ RESULTADO FINAL:")
        print(f"   Total menciones encontradas: {len(mentions_found)}")
        print(f"   Brand mentioned: {len(mentions_found) > 0}")
        
        if mentions_found:
            print(f"\n   üìù Contextos de menciones:")
            for var, context in mentions_found[:3]:  # Mostrar solo primeras 3
                print(f"\n   Variaci√≥n: '{var}'")
                print(f"   Contexto: ...{context}...")
        
        # 4. Buscar competidores
        print(f"\n4Ô∏è‚É£ COMPETIDORES DETECTADOS:")
        for competitor in competitors:
            comp_variations = extract_brand_variations(competitor.lower())
            comp_count = 0
            
            for variation in comp_variations:
                pattern = r'\b' + re.escape(variation.lower()) + r'\b'
                comp_count += len(re.findall(pattern, text_lower, re.IGNORECASE))
            
            if comp_count > 0:
                print(f"   ‚úÖ '{competitor}': {comp_count} menciones")
            else:
                print(f"   ‚ùå '{competitor}': 0 menciones")
        
        print(f"\n{'='*80}\n")
    
    # An√°lisis manual (b√∫squeda simple)
    print("\n" + "="*80)
    print("5Ô∏è‚É£ B√öSQUEDA MANUAL SIMPLE (sin regex):")
    print("="*80)
    
    simple_searches = ['ginemed', 'ivi', 'reproducci√≥n asistida', 'eevee', 'ginemate']
    text_lower = RESPONSE_TEXT.lower()
    
    for term in simple_searches:
        count = text_lower.count(term)
        if count > 0:
            print(f"   ‚úÖ '{term}': {count} menciones (b√∫squeda simple)")
        else:
            print(f"   ‚ùå '{term}': 0 menciones")
    
    print("\n" + "="*80)
    print("‚úÖ DIAGN√ìSTICO COMPLETADO")
    print("="*80)

if __name__ == '__main__':
    diagnose_mention_detection()

