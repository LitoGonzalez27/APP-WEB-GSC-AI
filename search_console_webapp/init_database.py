#!/usr/bin/env python3
"""
Script de inicializaci√≥n de la base de datos
Crea las tablas necesarias y datos de prueba si es necesario
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import (
    init_database, 
    ensure_sample_data, 
    migrate_user_timestamps,
    get_ai_overview_stats,
    init_ai_overview_tables
)
import logging

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def main():
    """Funci√≥n principal de inicializaci√≥n"""
    logger.info("üöÄ Iniciando inicializaci√≥n de la base de datos...")
    
    try:
        # 1. Inicializar tablas principales (users + ai_overview_analysis)
        logger.info("üìã Creando tablas principales...")
        if init_database():
            logger.info("‚úÖ Tablas principales inicializadas correctamente")
        else:
            logger.error("‚ùå Error inicializando tablas principales")
            return False
        
        # 2. Migrar timestamps si es necesario
        logger.info("üîÑ Verificando migraci√≥n de timestamps...")
        if migrate_user_timestamps():
            logger.info("‚úÖ Migraci√≥n de timestamps completada")
        else:
            logger.warning("‚ö†Ô∏è Error en migraci√≥n de timestamps")
        
        # 3. Asegurar datos de muestra
        logger.info("üë• Verificando datos de muestra...")
        if ensure_sample_data():
            logger.info("‚úÖ Datos de muestra verificados")
        else:
            logger.warning("‚ö†Ô∏è Error con datos de muestra")
        
        # 4. Verificar tablas de AI Overview espec√≠ficamente
        logger.info("ü§ñ Verificando tablas de AI Overview...")
        if init_ai_overview_tables():
            logger.info("‚úÖ Tablas de AI Overview verificadas")
        else:
            logger.error("‚ùå Error con tablas de AI Overview")
            return False
        
        # 5. Inicializar tablas del Manual AI System (opcional)
        logger.info("üîß Verificando tablas del Manual AI System...")
        try:
            from create_manual_ai_tables import create_manual_ai_tables
            if create_manual_ai_tables():
                logger.info("‚úÖ Tablas del Manual AI System verificadas")
            else:
                logger.warning("‚ö†Ô∏è Error con tablas del Manual AI System (no cr√≠tico)")
        except ImportError:
            logger.info("‚ÑπÔ∏è Manual AI System no disponible - saltando inicializaci√≥n")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Error inicializando Manual AI System: {e} (no cr√≠tico)")
        
        # 6. Obtener estad√≠sticas iniciales
        logger.info("üìä Obteniendo estad√≠sticas iniciales...")
        try:
            ai_stats = get_ai_overview_stats()
            logger.info(f"üìà Estad√≠sticas AI Overview: {ai_stats.get('total_analyses', 0)} an√°lisis en base de datos")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Error obteniendo estad√≠sticas: {e}")
        
        # 7. Verificar conexi√≥n Redis (no cr√≠tico)
        logger.info("üíæ Verificando sistema de cach√©...")
        try:
            from services.ai_cache import ai_cache
            cache_stats = ai_cache.get_cache_stats()
            if cache_stats.get('cache_available'):
                logger.info("‚úÖ Sistema de cach√© Redis disponible")
                logger.info(f"üì¶ Cach√©: {cache_stats.get('ai_analyses_cached', 0)} an√°lisis en cach√©")
            else:
                logger.warning("‚ö†Ô∏è Redis no disponible - funcionando sin cach√©")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Error verificando cach√©: {e}")
        
        logger.info("üéâ Inicializaci√≥n completada exitosamente")
        logger.info("=" * 50)
        logger.info("üí° El sistema est√° listo para:")
        logger.info("   - An√°lisis de AI Overview con persistencia")
        logger.info("   - Manual AI Analysis (proyectos independientes)")
        logger.info("   - Sistema de cach√© inteligente")
        logger.info("   - Gr√°ficos de tipolog√≠a de consultas")
        logger.info("   - Gesti√≥n de usuarios y autenticaci√≥n")
        logger.info("=" * 50)
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error cr√≠tico en inicializaci√≥n: {e}")
        return False

if __name__ == "__main__":
    success = main()
    if success:
        logger.info("‚úÖ Script de inicializaci√≥n completado con √©xito")
        sys.exit(0)
    else:
        logger.error("‚ùå Script de inicializaci√≥n fall√≥")
        sys.exit(1) 