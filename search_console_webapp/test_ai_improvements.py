#!/usr/bin/env python3
"""
Script de prueba para verificar las mejoras de AI Overview
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import (
    get_db_connection,
    get_ai_overview_stats,
    save_ai_overview_analysis
)
from services.ai_cache import ai_cache
import json
import time

def test_database_connection():
    """Prueba la conexi√≥n a la base de datos"""
    print("üîç Probando conexi√≥n a la base de datos...")
    
    try:
        conn = get_db_connection()
        if conn:
            print("‚úÖ Conexi√≥n a PostgreSQL exitosa")
            
            # Verificar tabla ai_overview_analysis
            cur = conn.cursor()
            cur.execute("""
                SELECT column_name, data_type 
                FROM information_schema.columns 
                WHERE table_name = 'ai_overview_analysis'
                ORDER BY ordinal_position;
            """)
            columns = cur.fetchall()
            
            print(f"‚úÖ Tabla ai_overview_analysis tiene {len(columns)} columnas:")
            for col in columns[:5]:  # Mostrar solo las primeras 5
                print(f"   - {col[0]} ({col[1]})")
            if len(columns) > 5:
                print(f"   ... y {len(columns) - 5} m√°s")
            
            conn.close()
            return True
        else:
            print("‚ùå Error de conexi√≥n a la base de datos")
            return False
            
    except Exception as e:
        print(f"‚ùå Error probando base de datos: {e}")
        return False

def test_cache_system():
    """Prueba el sistema de cach√©"""
    print("\nüíæ Probando sistema de cach√©...")
    
    try:
        cache_stats = ai_cache.get_cache_stats()
        
        if cache_stats.get('cache_available'):
            print("‚úÖ Redis disponible y funcionando")
            print(f"   - Versi√≥n Redis: {cache_stats.get('redis_version', 'unknown')}")
            print(f"   - Memoria usada: {cache_stats.get('used_memory', 'unknown')}")
            print(f"   - An√°lisis en cach√©: {cache_stats.get('ai_analyses_cached', 0)}")
            
            # Prueba de guardado/recuperaci√≥n
            test_keyword = "test keyword"
            test_site = "test.com"
            test_country = "esp"
            test_analysis = {
                'keyword': test_keyword,
                'ai_analysis': {'has_ai_overview': True, 'impact_score': 50},
                'timestamp': time.time()
            }
            
            # Guardar en cach√©
            if ai_cache.cache_analysis(test_keyword, test_site, test_country, test_analysis):
                print("‚úÖ Prueba de guardado en cach√© exitosa")
                
                # Recuperar del cach√©
                cached_data = ai_cache.get_cached_analysis(test_keyword, test_site, test_country)
                if cached_data:
                    print("‚úÖ Prueba de recuperaci√≥n de cach√© exitosa")
                else:
                    print("‚ö†Ô∏è No se pudo recuperar del cach√©")
            else:
                print("‚ö†Ô∏è No se pudo guardar en cach√©")
                
        else:
            print("‚ö†Ô∏è Redis no disponible - sistema funcionar√° sin cach√©")
            print("   Esto es normal si Redis no est√° instalado localmente")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Error probando cach√©: {e}")
        return False

def test_ai_stats():
    """Prueba las estad√≠sticas de AI Overview"""
    print("\nüìä Probando estad√≠sticas de AI Overview...")
    
    try:
        stats = get_ai_overview_stats()
        
        print("‚úÖ Estad√≠sticas obtenidas correctamente:")
        print(f"   - Total an√°lisis: {stats.get('total_analyses', 0)}")
        print(f"   - Con AI Overview: {stats.get('with_ai_overview', 0)}")
        print(f"   - Como fuente AI: {stats.get('as_ai_source', 0)}")
        print(f"   - Porcentaje AI: {stats.get('ai_overview_percentage', 0)}%")
        
        word_count_stats = stats.get('word_count_stats', [])
        if word_count_stats:
            print(f"   - Categor√≠as de tipolog√≠a: {len(word_count_stats)}")
        else:
            print("   - Sin datos de tipolog√≠a (normal en instalaci√≥n nueva)")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Error obteniendo estad√≠sticas: {e}")
        return False

def test_save_analysis():
    """Prueba guardar un an√°lisis de muestra"""
    print("\nüíæ Probando guardado de an√°lisis...")
    
    try:
        # Crear an√°lisis de muestra
        sample_analysis = {
            'results': [
                {
                    'keyword': 'keyword de prueba',
                    'ai_analysis': {
                        'has_ai_overview': True,
                        'domain_is_ai_source': False,
                        'impact_score': 75,
                        'total_elements': 1
                    },
                    'clicks_m1': 100,
                    'clicks_m2': 80,
                    'delta_clicks_absolute': -20,
                    'delta_clicks_percent': -20.0,
                    'impressions_m1': 1000,
                    'impressions_m2': 900,
                    'country_analyzed': 'esp',
                    'timestamp': time.time()
                }
            ],
            'summary': {
                'total_keywords_analyzed': 1,
                'keywords_with_ai_overview': 1
            },
            'site_url': 'test-domain.com'
        }
        
        # Intentar guardar
        if save_ai_overview_analysis(sample_analysis):
            print("‚úÖ An√°lisis de muestra guardado exitosamente")
            
            # Verificar que se guard√≥
            stats_after = get_ai_overview_stats()
            total_after = stats_after.get('total_analyses', 0)
            print(f"‚úÖ Total an√°lisis en BD: {total_after}")
            
            return True
        else:
            print("‚ùå Error guardando an√°lisis de muestra")
            return False
            
    except Exception as e:
        print(f"‚ùå Error probando guardado: {e}")
        return False

def main():
    """Funci√≥n principal de pruebas"""
    print("üß™ INICIANDO PRUEBAS DEL SISTEMA AI OVERVIEW")
    print("=" * 50)
    
    tests_passed = 0
    total_tests = 4
    
    # Ejecutar pruebas
    if test_database_connection():
        tests_passed += 1
        
    if test_cache_system():
        tests_passed += 1
        
    if test_ai_stats():
        tests_passed += 1
        
    if test_save_analysis():
        tests_passed += 1
    
    # Resumen final
    print("\n" + "=" * 50)
    print(f"üèÅ RESUMEN DE PRUEBAS: {tests_passed}/{total_tests} exitosas")
    
    if tests_passed == total_tests:
        print("üéâ ¬°Todas las pruebas pasaron! Sistema completamente funcional.")
        print("\nüí° Pr√≥ximos pasos:")
        print("   1. Inicia la aplicaci√≥n: python3 app.py")
        print("   2. Ve a http://localhost:5001")
        print("   3. Ejecuta un an√°lisis AI Overview")
        print("   4. Verifica el gr√°fico de tipolog√≠a")
        return True
    else:
        print(f"‚ö†Ô∏è {total_tests - tests_passed} pruebas fallaron. Revisa los errores arriba.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 