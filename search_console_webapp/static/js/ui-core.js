// Actualizaci√≥n de ui-core.js para integrar el nuevo selector de fechas

import { elems } from './utils.js';
import { 
  fetchData, 
  buildPeriodSummary, // ‚úÖ ACTUALIZADO: usar la nueva funci√≥n
  processUrlsForComparison, // ‚úÖ NUEVO: importar funci√≥n para URLs
  hasUrlComparison, // ‚úÖ NUEVO: importar funci√≥n de detecci√≥n
  generateUrlsStats // ‚úÖ NUEVO: importar estad√≠sticas de URLs
} from './data.js';
import { showProgress, completeProgress } from './ui-progress.js';
import {
  renderSummary,
  renderKeywords,
  renderInsights,
  renderTable,
  renderTableError,
  updateGlobalKeywordData
} from './ui-render.js';
import { renderKeywordComparisonTable, clearKeywordComparisonTable } from './ui-keyword-comparison-table.js';
import { enableAIOverviewAnalysis } from './ui-ai-overview-main.js';
import { 
  initStickyActions, 
  showStickyActions, 
  hideStickyActions, 
  updateStickyData 
} from './ui-sticky-actions.js';
import { isMobileDevice, getDeviceType, optimizeForMobile, showMobileOptimizationNotice, getAdaptiveTimeouts } from './utils.js';

// ‚úÖ IMPORTAR el nuevo selector de fechas
import { 
  initDateRangeSelector, 
  getSelectedDates, 
  validateSelectedDates 
} from './ui-date-selector.js';

// ‚úÖ REEMPLAZAR initMonthChips con initDateRangeSelector
export function initMonthChips() {
  // Inicializar el nuevo selector de fechas en lugar de chips
  initDateRangeSelector();
  console.log('‚úÖ Date Range Selector initialized');
}

// ‚úÖ ACTUALIZAR handleFormSubmit para trabajar con fechas espec√≠ficas
export async function handleFormSubmit(e) {
  e.preventDefault();
  if (!elems.form) {
    console.error("Formulario no encontrado.");
    alert("Error: formulario no disponible.");
    return;
  }

  // ‚úÖ NUEVO: Detecci√≥n m√≥vil mejorada y optimizaciones autom√°ticas
  const isMobile = isMobileDevice();
  const deviceType = getDeviceType();
  const adaptiveTimeouts = getAdaptiveTimeouts();
  
  if (isMobile) {
    console.log(`üì± ${deviceType} detectado - aplicando optimizaciones avanzadas`);
    
    // Aplicar optimizaciones m√≥viles autom√°ticamente
    optimizeForMobile();
    
    // Mostrar notificaci√≥n optimizada para m√≥viles
    showMobileOptimizationNotice();
  }

  // ‚úÖ NUEVO: Validar fechas seleccionadas
  const dateValidation = validateSelectedDates();
  if (!dateValidation.isValid) {
    const errorMessage = dateValidation.errors.join('\n');
    alert(`Error en las fechas seleccionadas:\n\n${errorMessage}`);
    return;
  }

  // ‚úÖ NUEVO: Obtener fechas del selector
  const selectedDates = getSelectedDates();
  if (!selectedDates) {
    alert('Error: no se pudieron obtener las fechas seleccionadas.');
    return;
  }

  console.log('üìÖ Fechas seleccionadas:', selectedDates);

  // ‚úÖ ARREGLO CR√çTICO: Verificar que site_url est√© seleccionado
  if (!elems.siteUrlSelect || !elems.siteUrlSelect.value) {
    alert('Error: You must select a domain before continuing.');
    return;
  }

  // ‚úÖ NUEVO: Validaci√≥n de compatibilidad de dominios
  const urlsInput = document.querySelector('textarea[name="urls"]');
  if (urlsInput && urlsInput.value.trim()) {
    // Importar DataValidator din√°micamente
    const { DataValidator } = await import('./ui-validations.js');
    const validator = new DataValidator();
    
    const urls = urlsInput.value.trim().split('\n').filter(url => url.trim());
    const selectedProperty = elems.siteUrlSelect.value;
    
    console.log('üîç Ejecutando validaci√≥n de dominios...', {
      selectedProperty,
      urlCount: urls.length
    });
    
    const domainValidation = validator.validateDomainCompatibility(urls, selectedProperty);
    
    if (!domainValidation.isValid) {
      console.error('‚ùå Validaci√≥n de dominio fallida:', domainValidation.errors);
      alert(domainValidation.errors.join('\n\n'));
      return;
    }
    
    if (domainValidation.warnings && domainValidation.warnings.length > 0) {
      console.warn('‚ö†Ô∏è Advertencias de validaci√≥n:', domainValidation.warnings);
      // Las advertencias no bloquean el env√≠o, solo se logean
    }
    
    console.log('‚úÖ Validaci√≥n de dominios exitosa');
  }

  // ‚úÖ NUEVO: Validaciones espec√≠ficas para m√≥viles
  if (isMobile) {
    const urlsInput = document.querySelector('textarea[name="urls"]');
    if (urlsInput && urlsInput.value.trim()) {
      const urls = urlsInput.value.trim().split('\n').filter(u => u.trim());
      if (urls.length > 10) {
        const confirmResult = confirm(`Tienes ${urls.length} URLs para analizar. En dispositivos m√≥viles se recomienda m√°ximo 10 URLs para evitar timeouts.\n\n¬øQuieres continuar de todos modos?`);
        if (!confirmResult) {
          return;
        }
      }
    }
    
    // Validar per√≠odos largos en m√≥viles
    if (selectedDates.currentPeriod) {
      const startDate = new Date(selectedDates.currentPeriod.startDate);
      const endDate = new Date(selectedDates.currentPeriod.endDate);
      const daysDiff = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24));
      
      if (daysDiff > 90) {
        const confirmResult = confirm(`Has seleccionado un per√≠odo de ${daysDiff} d√≠as. En dispositivos m√≥viles se recomienda m√°ximo 90 d√≠as para evitar timeouts.\n\n¬øQuieres continuar de todos modos?`);
        if (!confirmResult) {
          return;
        }
      }
    }
  }

  const formData = new FormData(elems.form);

  // ‚úÖ ARREGLO CR√çTICO: Asegurar que site_url se incluya
  formData.set('site_url', elems.siteUrlSelect.value);

  // ‚úÖ NUEVO: Agregar fechas espec√≠ficas al FormData
  formData.set('current_start_date', selectedDates.currentPeriod.startDate);
  formData.set('current_end_date', selectedDates.currentPeriod.endDate);
  
  // Agregar datos de comparaci√≥n si existen
  if (selectedDates.hasComparison && selectedDates.comparisonPeriod) {
    formData.set('has_comparison', 'true');
    formData.set('comparison_start_date', selectedDates.comparisonPeriod.startDate);
    formData.set('comparison_end_date', selectedDates.comparisonPeriod.endDate);
    formData.set('comparison_mode', selectedDates.comparisonMode);
  } else {
    formData.set('has_comparison', 'false');
  }

  // ‚úÖ ARREGLO: Obtener match_type de los radio buttons
  const matchTypeElement = document.querySelector('input[name="match_type"]:checked');
  if (matchTypeElement) {
    formData.set('match_type', matchTypeElement.value);
  } else {
    formData.set('match_type', 'contains'); // default value
  }

  // ‚úÖ CORREGIDO: L√≥gica de pa√≠s que respeta "Todos los pa√≠ses"
  const countryToUse = window.getCountryToUse ? window.getCountryToUse() : null;

  // ‚úÖ NUEVO: Solo a√±adir al FormData si hay un pa√≠s espec√≠fico seleccionado
  if (countryToUse) {
    formData.set('country', countryToUse);
    const countryName = window.getCountryName ? window.getCountryName(countryToUse) : countryToUse;
    console.log(`üéØ Consulta con filtro de pa√≠s: ${countryName}`);
  } else {
    // ‚úÖ NUEVO: Expl√≠citamente NO a√±adir 'country' al FormData
    // Esto hace que el backend NO aplique filtro de pa√≠s = todos los pa√≠ses
    console.log('üåç Consulta SIN filtro de pa√≠s (todos los pa√≠ses)');
  }

  // ‚úÖ DEBUGGING: Log del FormData para verificar
  console.log('üìã Datos que se enviar√°n:');
  const hasCountryFilter = formData.has('country');
  console.log(`  Filtro de pa√≠s: ${hasCountryFilter ? `S√ç (${formData.get('country')})` : 'NO (todos los pa√≠ses)'}`);

  for (const [key, value] of formData.entries()) {
    console.log(`  ${key}: ${value}`);
  }

  // Reset UI
  hideStickyActions();
  
  [
    elems.insightsSection, elems.performanceSection,
    elems.keywordsSection, elems.resultsSection,
    elems.downloadBlock, elems.aiOverviewSection
  ].forEach(el => el && (el.style.display = 'none'));

  [
    elems.insightsTitle, elems.performanceTitle,
    elems.keywordsTitle, elems.resultsTitle,
    elems.keywordComparisonTableTitle, elems.aiOverviewTitle
  ].forEach(el => el && (el.style.display = 'none'));

  if (elems.disclaimerBlock) elems.disclaimerBlock.innerHTML = '';
  if (elems.keywordOverviewDiv) elems.keywordOverviewDiv.innerHTML = '';
  if (elems.keywordCategoryDiv) elems.keywordCategoryDiv.innerHTML = '';
  clearKeywordComparisonTable();
  
  // ‚úÖ MEJORADO: No limpiar tableBody aqu√≠, se har√° en renderTable con cleanupPreviousTable()
  // Esto evita conflictos y permite una limpieza m√°s robusta
  console.log('üîÑ Preparando para nueva consulta - limpieza b√°sica realizada');
  
  if (elems.aiAnalysisMessage) elems.aiAnalysisMessage.innerHTML = '';
  if (elems.aiOverviewResultsContainer) elems.aiOverviewResultsContainer.innerHTML = '';

  window.currentData = null;
  window.currentAIOverviewData = null;

  // ‚úÖ NUEVO: Extraer par√°metros para la estimaci√≥n de tiempo
  const urlsValue = formData.get('urls') || '';
  const urlCount = urlsValue.trim() === '' ? 0 : urlsValue.trim().split(/\r\n|\r|\n/).length;
  const countrySelected = !!formData.get('country');
  const matchType = formData.get('match_type') || 'contains';
  const analysisParams = { urlCount, countrySelected, matchType };

  // ‚úÖ NUEVO: Advertencia para m√°s de 25 URLs
  if (urlCount > 25) {
    const confirmation = window.confirm(
        `Est√°s a punto de analizar ${urlCount} URLs. ` +
        `El proceso puede tardar mucho tiempo (m√°s de 15 minutos) y podr√≠a fallar.\n\n` +
        `¬øDeseas continuar de todas formas?`
    );
    if (!confirmation) {
        console.log('An√°lisis cancelado por el usuario debido al alto n√∫mero de URLs.');
        // Reactivar el bot√≥n de env√≠o si el usuario cancela
        const submitButton = document.querySelector('#urlForm button[type="submit"]');
        if (submitButton) {
            submitButton.disabled = false;
            submitButton.innerHTML = '<i class="fas fa-search"></i> Analyze Performance';
        }
        return; // Detener el proceso
    }
  }

  // ‚úÖ NUEVO: Pasos de progreso actualizados para fechas espec√≠ficas y m√≥viles
  let steps = [
    'Validating dates and preparing query‚Ä¶',
    'Getting main period data‚Ä¶',
    selectedDates.hasComparison ? 'Getting comparison period data‚Ä¶' : null,
    'Processing URL metrics‚Ä¶',
    selectedDates.hasComparison ? 'Calculating period comparisons‚Ä¶' : null,
    'Generating summaries and charts‚Ä¶',
    'Finishing analysis‚Ä¶'
  ].filter(Boolean); // Eliminar elementos null

  // ‚úÖ NUEVO: Mensaje adicional para m√≥viles
  if (isMobile) {
    steps.push('Optimizing results for mobile display‚Ä¶');
  }

  showProgress(steps, analysisParams);

  try {
    const data = await fetchData(formData);
    
    if (data.error && data.reauth_required) {
        alert(data.error + "\nPor favor, recarga la p√°gina para re-autenticar.");
        completeProgress();
        return;
    }
    
    if (data.error) {
        // ‚úÖ NUEVO: Mensaje de error m√°s claro para m√≥viles
        let errorMessage = "Error del servidor: " + data.error;
        if (isMobile && (data.error.includes('timeout') || data.error.includes('tardando'))) {
          errorMessage += "\n\nüí° Consejo para m√≥viles: Intenta con un per√≠odo m√°s corto o menos URLs.";
        }
        alert(errorMessage);
        renderTableError();
        if(elems.keywordComparisonTableBody) {
          elems.keywordComparisonTableBody.innerHTML = '<tr><td colspan="13">Error al cargar datos del servidor.</td></tr>';
        }
        if(elems.keywordsSection) elems.keywordsSection.style.display = 'block';
        if(elems.keywordComparisonTableTitle) elems.keywordComparisonTableTitle.style.display = 'block';
        completeProgress();
        return;
    }

    window.currentData = data;

    // ‚úÖ NUEVO: Procesar informaci√≥n del modo de an√°lisis
    if (data.analysis_info) {
      console.log('üìä Modo de an√°lisis:', data.analysis_info);
      
      // Mostrar informaci√≥n del modo de an√°lisis en la UI
      if (window.displayAnalysisMode) {
        window.displayAnalysisMode(data.analysis_info);
      }
    }

    // ‚úÖ DEBUGGING: Log de datos recibidos
    console.log('üìä Datos recibidos:', {
      keywordStats: data.keywordStats,
      keywordComparisonCount: data.keyword_comparison_data?.length || 0,
      urlsCount: data.pages?.length || 0,
      summaryCount: data.summary?.length || 0,
      periods: data.periods,
      analysisMode: data.analysis_mode
    });

    // ‚úÖ NUEVO: Actualizar datos globales de keywords para los modales
    updateGlobalKeywordData(data.keyword_comparison_data || []);

    // ‚úÖ MODIFICADO: Usar datos de summary para m√©tricas agregadas, pages para tabla
    const summaryData = data.summary && data.summary.length > 0 ? data.summary : data.pages;
    const summary = buildPeriodSummary(summaryData, data.periods);
    renderSummary(summary);

    renderKeywords(data.keywordStats);
    
    // ‚úÖ CAMBIO PRINCIPAL: Pasar tambi√©n la informaci√≥n de per√≠odos
    renderKeywordComparisonTable(data.keyword_comparison_data || [], data.periods);

    const siteUrlForAI = elems.siteUrlSelect ? elems.siteUrlSelect.value : '';
    enableAIOverviewAnalysis(data.keyword_comparison_data || [], siteUrlForAI);

    renderInsights(summary);
    
    // ‚úÖ NUEVO: Renderizar tabla de URLs con nueva l√≥gica
    renderTable(data.pages);

    // ‚úÖ NUEVO: Generar estad√≠sticas adicionales de URLs si hay comparaci√≥n
    if (hasUrlComparison(data.pages)) {
      const urlsData = processUrlsForComparison(data.pages, data.periods);
      const urlsStats = generateUrlsStats(urlsData);
      console.log('üìã Estad√≠sticas de URLs generadas:', urlsStats);
      
      // ‚úÖ ELIMINADO: Ya no agregamos conteo din√°mico al t√≠tulo - se mantiene limpio como "URLs Performance"
    }

    const keywordData = data.keyword_comparison_data || [];
    updateStickyData(keywordData, siteUrlForAI);
    
    // ‚úÖ NUEVO: Actualizar datos del overlay AI
    if (window.updateAIOverlayData) {
      window.updateAIOverlayData(keywordData, siteUrlForAI);
    }
    
    showStickyActions();

    // ‚úÖ NUEVO: Mensaje de √©xito para m√≥viles
    if (isMobile) {
      console.log('‚úÖ An√°lisis completado exitosamente en dispositivo m√≥vil');
    }

  } catch (err) {
    console.error("Error en handleFormSubmit:", err);
    
    // ‚úÖ NUEVO: Mensaje de error espec√≠fico para m√≥viles con timeouts adaptativos
    let errorMessage = "Se produjo un error al procesar tu solicitud: " + err.message;
    
    if (isMobile) {
      if (err.message.includes('timeout') || err.message.includes('tardando')) {
        errorMessage += `\n\nüì± Problema com√∫n en dispositivos ${deviceType}:`;
        errorMessage += `\n‚Ä¢ Timeout extendido a ${adaptiveTimeouts.request.timeout / 1000}s para m√≥viles`;
        errorMessage += `\n‚Ä¢ Reintentos autom√°ticos: ${adaptiveTimeouts.request.retry}`;
        errorMessage += "\n\nüí° Soluciones:";
        errorMessage += "\n‚Ä¢ Reduce el n√∫mero de URLs";
        errorMessage += "\n‚Ä¢ Selecciona un per√≠odo m√°s corto";
        errorMessage += "\n‚Ä¢ Verifica tu conexi√≥n a internet";
        errorMessage += "\n‚Ä¢ Intenta desde WiFi en lugar de datos m√≥viles";
      } else if (err.message.includes('conexi√≥n') || err.message.includes('network')) {
        errorMessage += "\n\nüì± Problema de conexi√≥n en m√≥vil:";
        errorMessage += "\n‚Ä¢ Verifica que tengas buena se√±al";
        errorMessage += "\n‚Ä¢ Intenta conectarte a WiFi";
        errorMessage += "\n‚Ä¢ Cierra otras apps que usen internet";
        errorMessage += `\n‚Ä¢ Sistema de reintentos: ${adaptiveTimeouts.request.retry} intentos`;
      }
    }
    
    alert(errorMessage);
    renderTableError();
    if(elems.keywordComparisonTableBody) {
      elems.keywordComparisonTableBody.innerHTML = '<tr><td colspan="13">Error al procesar la solicitud.</td></tr>';
    }
    if(elems.keywordsSection) elems.keywordsSection.style.display = 'block';
    if(elems.keywordComparisonTableTitle) elems.keywordComparisonTableTitle.style.display = 'block';
  } finally {
    completeProgress();
  }
}


// ‚úÖ FUNCI√ìN auxiliar para formatear per√≠odos en t√≠tulos
function formatPeriodForTitle(period) {
  if (!period.start_date || !period.end_date) return 'Undefined period';
  
  const startDate = new Date(period.start_date);
  const endDate = new Date(period.end_date);
  
  // Si es el mismo d√≠a
  if (period.start_date === period.end_date) {
    return startDate.toLocaleDateString('es-ES', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  }
  
  // Si es el mismo mes
  if (startDate.getMonth() === endDate.getMonth() && startDate.getFullYear() === endDate.getFullYear()) {
    return `${startDate.getDate()}-${endDate.getDate()} ${startDate.toLocaleDateString('es-ES', { month: 'short', year: 'numeric' })}`;
  }
  
  // Per√≠odo completo
  const startStr = startDate.toLocaleDateString('es-ES', { day: '2-digit', month: '2-digit' });
  const endStr = endDate.toLocaleDateString('es-ES', { day: '2-digit', month: '2-digit', year: 'numeric' });
  
  return `${startStr} - ${endStr}`;
}

// ‚úÖ MANTENER initDownloadExcel sin cambios
export function initDownloadExcel() {
  initStickyActions();
  
  if (elems.downloadExcelBtn) {
    console.log('‚ö†Ô∏è Bot√≥n Excel original detectado - deber√≠a estar oculto en favor de botones sticky');
  }
}

// ‚úÖ NUEVA funci√≥n para debugging del selector de fechas
window.debugDateSelector = function() {
  if (window.dateSelector) {
    console.log('=== DEBUG DATE SELECTOR ===');
    console.log('Fechas seleccionadas:', window.dateSelector.getFormattedDates());
    console.log('Validaci√≥n:', window.dateSelector.validateDates());
    console.log('Per√≠odo actual:', window.dateSelector.currentPeriod);
    console.log('Per√≠odo comparaci√≥n:', window.dateSelector.comparisonPeriod);
    console.log('Modo comparaci√≥n:', window.dateSelector.comparisonMode);
    console.log('==========================');
  } else {
    console.warn('Date selector not initialized');
  }
};

// ‚úÖ NUEVA funci√≥n para debugging de URLs
window.debugUrlsTable = function() {
  if (window.currentData && window.currentData.pages) {
    console.log('=== DEBUG URLS TABLE ===');
    const hasComparison = hasUrlComparison(window.currentData.pages);
    console.log('¬øTiene comparaci√≥n?:', hasComparison);
    console.log('Total p√°ginas:', window.currentData.pages.length);
    
    window.currentData.pages.forEach((page, index) => {
      console.log(`P√°gina ${index + 1}:`, {
        url: page.URL,
        metricsCount: page.Metrics ? page.Metrics.length : 0,
        metrics: page.Metrics
      });
    });
    
    if (hasComparison) {
      const processedUrls = processUrlsForComparison(window.currentData.pages, window.currentData.periods);
      console.log('URLs procesadas:', processedUrls);
      
      const stats = generateUrlsStats(processedUrls);
      console.log('Estad√≠sticas:', stats);
    }
    console.log('========================');
  } else {
    console.warn('No data loaded for debugging');
  }
};