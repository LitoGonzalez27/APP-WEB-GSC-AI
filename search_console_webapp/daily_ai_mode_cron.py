#!/usr/bin/env python3
"""
Script para el cron job diario del AI Mode Monitoring System
Este script debe ejecutarse diariamente para analizar todos los proyectos activos.

CONFIGURACI√ìN CRON:
# Ejecutar todos los d√≠as a las 3:00 AM (diferente de manual_ai para evitar conflictos)
0 3 * * * cd /path/to/your/app && python3 daily_ai_mode_cron.py >> /var/log/ai_mode_cron.log 2>&1

RAILWAY SETUP:
Se configura en railway.json como job separado
"""

import sys
import os
import logging
from datetime import datetime

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('ai_mode_cron')

def main():
    try:
        logger.info("üïí === AI MODE MONITORING CRON JOB STARTED ===")
        logger.info(f"‚è∞ Timestamp: {datetime.now().isoformat()}")
        
        # Importar la funci√≥n de an√°lisis diario a trav√©s del bridge
        from ai_mode_system_bridge import run_daily_analysis_for_all_ai_mode_projects, USING_AI_MODE_SYSTEM
        
        if USING_AI_MODE_SYSTEM:
            logger.info("üì¶ Usando el sistema AI Mode Monitoring")
        else:
            logger.warning("‚ö†Ô∏è AI Mode system not available")
            sys.exit(1)
        
        # Ejecutar an√°lisis diario
        logger.info("üöÄ Iniciando an√°lisis diario de proyectos AI Mode...")
        result = run_daily_analysis_for_all_ai_mode_projects()
        
        if result.get("success"):
            logger.info(f"‚úÖ AI Mode daily analysis completed successfully:")
            logger.info(f"   üìä Total projects: {result.get('total_projects', 0)}")
            logger.info(f"   ‚úÖ Successful: {result.get('successful', 0)}")
            logger.info(f"   ‚ùå Failed: {result.get('failed', 0)}")
            logger.info(f"   ‚è≠Ô∏è Skipped: {result.get('skipped', 0)}")
            logger.info(f"   üéØ Total keywords analyzed: {result.get('total_keywords_analyzed', 0)}")
            logger.info(f"   üí∞ RU consumed: {result.get('total_ru_consumed', 0)}")
            
            logger.info("üéâ AI MODE CRON JOB COMPLETED SUCCESSFULLY")
            # Exit code 0 para √©xito
            sys.exit(0)
        else:
            logger.error(f"‚ùå AI Mode daily analysis failed: {result.get('error', 'Unknown error')}")
            logger.error("üí• AI MODE CRON JOB FAILED")
            # Exit code 1 para error
            sys.exit(1)
            
    except ImportError as e:
        logger.error(f"‚ùå Import error: {e}")
        logger.error("Sugerencia: verifica que ai-mode-projects est√© correctamente instalado")
        sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå Unexpected error: {e}", exc_info=True)
        logger.error("üí• AI MODE CRON JOB CRASHED")
        sys.exit(1)

if __name__ == "__main__":
    main()

